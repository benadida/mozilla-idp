#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// I sign keys.  That's what I do.

const
path = require('path'),
express = require('express'),
statsd = require('../lib/statsd');

const
config = require('../lib/configuration.js'),
httputils = require('../lib/httputils.js'),
validate = require('../lib/validate.js'),
logger = require('../lib/logging.js').logger,
heartbeat = require('../lib/heartbeat'),
shutdown = require('../lib/shutdown'),
computecluster = require('compute-cluster'),
urlparse = require('urlparse');

const HOSTNAME = config.get('issuer');
logger.info("Certs will be issued from: " + HOSTNAME);

// create an express server
var app = express.createServer();

// respond to health checks (before logging)
heartbeat.setup(app);

// our server will log
app.use(express.logger());

var statsd_config = config.get('statsd');
console.log('hello');
console.log(statsd_config);
if (statsd_config && statsd_config.enabled) {
  logger_statsd = require("connect-logger-statsd");
  app.use(logger_statsd({
    host: statsd_config.hostname || "localhost",
    port: statsd_config.port || 8125,
    prefix: statsd_config.prefix || "browserid.keysigner."
  }));
}

// parse POST bodies
app.use(express.bodyParser());

try {
  // explicitly relay VAR_PATH to children
  process.env['VAR_PATH'] = config.get('var_path');

  // allocate a compute cluster
  var cc = new computecluster({
    module: path.join(__dirname, "..", "lib", "keysigner", "keysigner-compute.js"),
    max_processes: config.get('max_compute_processes')
  }).on('error', function(e) {
        console.log("error detected in keysigning computation process!  fatal: " + e.toString());
    logger.error("error detected in keysigning computation process!  fatal: " + e.toString());
    setTimeout(function() { process.exit(1); }, 0);
  }).on('info', function(msg) {
    logger.info("(compute cluster): " + msg);
  }).on('debug', function(msg) {
    logger.debug("(compute cluster): " + msg);
  });
  console.log('compute setup');

} catch(e) {
  console.log("can't allocate compute cluster: " + e);
  process.stderr.write("can't allocate compute cluster: " + e + "\n");
  process.exit(1);
}

// and our single function
app.post('/wsapi/cert_key', validate(["email", "pubkey", "ephemeral"]), function(req, resp) {
  var startTime = new Date();
  cc.enqueue({
    pubkey: req.body.pubkey,
    email: req.body.email,
    validityPeriod: (req.body.ephemeral ? config.get('ephemeral_session_duration_ms') : config.get('certificate_validity_ms')),
    hostname: HOSTNAME
  }, function (err, r) {
    var reqTime = new Date - startTime;
    statsd.timing('certification_time', reqTime);

    // consider "application" errors to be the same as harder errors
    if (!err && r && r.error) err = r.error;
    else if (!r || !r.success) err = "no certificate returned from child process";

    if (err) {
      logger.error("certification generation error: " + err);
      httputils.serverError(resp, "certification generation error");
    } else {
      resp.writeHead(200, {'Content-Type': 'text/plain'});
      resp.write(r.success);
      resp.end();
    }
  });
});

// shutdown nicely on signals
shutdown.handleTerminationSignals(app, function() {
  console.log('calling cc.exit');
  cc.exit();
  process.exit(0);
  console.log('after cc.exit');
});

var bindTo = config.get('keysigner_bind_to');
app.listen(bindTo.port, bindTo.host, function() {
  logger.info("running on http://" + app.address().address + ":" + app.address().port);
});
