#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const express = require("express"),
      fs = require("fs"),
      http = require("http"),
      https = require("https"),
      i18n = require('i18n-abide'),
      path = require("path"),
      sessions = require("client-sessions"),
      util = require("util");


const config = require('../lib/configuration'),
      routes = require("../routes").routes(),
      wsapi = require('../lib/wsapi');

// TODO unknown email address
// TODO Add Winston
// TODO add statsd


var app,
    options = {};

console.log('changing into ' + path.dirname(__dirname));
// ./server is our current working directory
process.chdir(path.dirname(__dirname));


if (config.get('use_https')) {
  try {
    var privateKey = fs.readFileSync('config/privatekey.pem').toString();
    var certificate = fs.readFileSync('config/certificate.pem').toString();
    app = express.createServer({key: privateKey, cert: certificate});
  } catch (e) {
    console.error('You must setup config/privatekey.pem and config/certificate.pem');
    console.error('See docs/DEV_NOTES.md for details.');
    throw e;
  }
} else {
  app = express.createServer();
}

app.configure('development', function () {
  app.use(express.responseTime());

  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});
app.configure('production', function(){
  app.use(express.errorHandler());
});
console.log('views are in ' + path.join(process.cwd(), 'views'));
app.configure(function(){
  app.set('views', path.join(process.cwd(), 'views'));
  app.set('view engine', 'ejs');
  app.use(express.logger());
  var statsd_config = config.get('statsd');
  if (statsd_config && statsd_config.enabled) {
    logger_statsd = require("connect-logger-statsd");
    app.use(logger_statsd({
      host: statsd_config.hostname || "localhost",
      port: statsd_config.port || 8125,
      prefix: statsd_config.prefix || "browserid.keysigner."
    }));
  }
  //
  app.use(express.bodyParser());

  app.use(express.methodOverride());
  var sess_config = config.get('client_sessions');
  app.use(sessions({
    cookieName: sess_config.cookie_name,
    secret: sess_config.secret,
    duration: sess_config.duration, // 1 day
    cookie: {
      maxAge: 14 * 24 * 60 * 60 * 1000 // 2 weeks
    }
  }));
  app.use(express.csrf());
console.log('supported_languages:',  config.get('supported_languages'));
  app.use(i18n.abide({
    supported_languages: config.get('supported_languages'),
    default_lang: config.get('default_lang'),
    debug_lang: config.get('debug_lang'),
    locale_directory: config.get('locale_directory')
  }));
  app.use(function (req, resp, next) {
    resp.local('csrf_token', req.session._csrf);
    resp.local('browserid_server', config.get('browserid_server'));
    var s = req.session || null;
    resp.local('session', s);

    // static_mount_path support, allows for putting all static files under
    // a specific url mount path
    // In practise... our IT team will always set this to /browserid, so there are
    // Two top level paths:
    // 1) /.well-known/browserid
    // 2) /browserid/*
    // So static files and express routes live under /browserid and we strip it from the url
    var static_mount_path = config.get('static_mount_path');
    resp.local('static_mount_path', static_mount_path);
    if (req.url.indexOf(static_mount_path) === 0) {
      req.url = req.url.replace(static_mount_path, '');
    }
    if (req.url[0] !== '/') {
      req.url = '/' + req.url;
    }
    next();
  });

  app.use(app.router);
  app.get('/', function (req, resp) {
    resp.render('home', {title: 'Testing homepage', delegate_domain_override: false});
  });
  // Make /.well-known/browserid
  // curl -k https://dev.clortho.mozilla.org/make/.well-known/browserid > static/.well-known/browserid


  app.get('/.well-known/browserid', routes.well_known_browserid);
  app.get('/provision', routes.provision);
  //app.post('/provision', routes.provision_key);
  if (config.get('signin_method') == 'basicauth') {
    app.get('/sign_in', routes.signin_from_basicauth);

  } else if (config.get('signin_method') == 'form') {
    app.get('/sign_in', routes.signin_from_form);
    app.post('/sign_in', routes.check_signin_from_form);

  }

  // Handle /wsapi requests
  wsapi.setup({}, app);

  // Dev and Stage only
  app.get('/signout', routes.signout);
  app.get('/delegate_domain_override.js', routes.delegate_domain_override);

  // Static
  var static_dir = path.join(process.cwd(), '..', 'static');
  app.use(express.compiler({ enable: ['less'],
                             src: './static'}
));

app.use(function (req, resp, next) {
    if ('/.well-known/browserid' === req.url) {
      resp.setHeader('Content-Type', 'application/json');
      resp.setHeader('Last-Modified', routes.well_known_last_mod);
    }
    next();
});

console.log('servering static out of ', static_dir);
app.use(express.static(static_dir));

app.use(function (req, resp, next) {
    routes.handle404(req, resp);
  });
});

// Startup
if (config.get('use_https')) {
  app.listen(443);
  console.log(util.format('Listing on https://%s', config.get('issuer')));
} else {
  app.listen(config.get('http_port'));
  console.log(util.format('Listing on http://%s:%s', config.get('issuer'), config.get('http_port')));
}

console.log("I am Vinz Clortho, keymaster of Zuul. Are you Gozer the gatekeeper?");
